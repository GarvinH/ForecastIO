{"version":3,"sources":["components/UI/ArrowButton/ArrowButton.module.css","enums.ts","context/WeatherContext.ts","components/Navigation/Navigation.tsx","containers/Banner/Banner.tsx","components/Layout/Layout.tsx","axios.ts","Resolvers/DateResolver/DateResolver.ts","components/WeatherCard/WeatherCard.tsx","assets/Arrow.svg","components/UI/ArrowButton/ArrowButton.tsx","Resolvers/UnitResolver/UnitResolver.ts","components/DetailedWeather/DetailedWeather.tsx","Resolvers/SearchResolver/SearchResolver.ts","Resolvers/ContentResolver/ContentResolver.tsx","containers/Forecast/Forecast.tsx","containers/Current/Current.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","weatherMode","searchMode","actionTypes","measurementSys","WeatherContext","React","createContext","changeWeatherMode","value","changeSearchMode","forecast","city","coord","cityChanged","coordChanged","measureSys","Metric","measureSysChanged","Navigation","forecastClicked","history","context","replace","currentClicked","current","Navbar","bg","variant","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","this","props","location","pathname","onClick","Component","contextType","withRouter","Banner","state","titleDecider","weatherMethod","cityTextChanged","setState","coordTextChanged","index","newCoord","formDecider","searchMethod","Form","Group","Control","type","placeholder","aria-label","onChange","event","target","searchChanged","formSubmit","preventDefault","title","form","Jumbotron","style","textTransform","onSubmit","Label","as","Button","controlId","custom","min","max","Layout","children","Fragment","instance","axios","create","baseURL","timestampToAdjustedDate","timestamp","timezone","Date","timestampToTimeString","date","hour","minutes","mins","getTimeString","getUTCHours","getUTCMinutes","WeatherCard","dateTimestamp","weatherInfo","temp","clicked","localDate","Card","textAlign","background","border","undefined","Body","Title","day","getDayString","getUTCDay","Text","Subtitle","month","getMonthString","getUTCMonth","getUTCDate","Img","src","icon","alt","main","description","_extends","Object","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Direction","_ref2","createElement","d","_ref","svgRef","width","height","viewBox","xmlSpace","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","ref","ForwardRef","forwardRef","ArrowButton","direction","show","buttonStyle","classes","button","up","push","down","hide","join","arrow","getTemperature","Number","Kelvin","toFixed","Imperial","getVolume","volume","Math","round","DetailedWeather","angle","weather","feelsLike","feels_like","Badge","humidity","cloudiness","clouds","all","windVelocity","wind","speed","kmh","getSpeed","deg","rain","snow","visibility","meters","km","getDistance","sunrise","sys","sunset","Container","fluid","Row","dt","Col","shouldUpdateSearch","currentCity","currentCoord","oldCity","oldCoord","getSearchPath","contentDeterminer","content","loading","code","message","Spinner","animation","role","Alert","Forecast","Array","cityInfo","forecastIndex","selectedForecast","getForecast","updateLoading","url","get","then","res","data","parseInt","cod","lastDate","list","weatherData","map","hourlyIndex","hourForecast","changedCity","name","catch","err","response","status","cardCycleUp","newForecastIndex","cardCycleDown","changeSelectedForecast","oldData","prevProps","saveData","cards","temperature","card","detailedInfo","detailedForecast","Current","getCurrent","currentWeather","App","forecastData","changeWeather","changeSearch","changeCity","changeCoord","measureSysChange","newLoading","saveForecastData","Provider","path","render","to","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.44c0cd6a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrow\":\"ArrowButton_arrow__2IULr\",\"button\":\"ArrowButton_button__2Aay4\",\"up\":\"ArrowButton_up__3SfcA\",\"down\":\"ArrowButton_down__1AGpw\",\"hide\":\"ArrowButton_hide__2TKzv\"};","export enum weatherMode {\n    forecast,\n    current\n}\n\nexport enum searchMode {\n    city,\n    coord\n}\n\nexport enum actionTypes {\n    changeWeatherMode,\n    changeSearchMode\n}\n\nexport enum measurementSys {\n    Kelvin,\n    Metric,\n    Imperial\n}","import React from 'react'\nimport { weatherMode, searchMode, measurementSys} from '../enums'\n\nconst WeatherContext = React.createContext({\n    changeWeatherMode: (value: weatherMode) => {},\n    changeSearchMode: (value: searchMode) => {},\n    weatherMode: weatherMode.forecast,\n    searchMode: searchMode.city,\n    city: \"\",\n    coord: [\"\", \"\"],\n    cityChanged: (city: string) => {},\n    coordChanged: (coord: Array<string>) => {},\n    measureSys: measurementSys.Metric,\n    measureSysChanged: (value: number) => {}\n})\n\nexport default WeatherContext","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport './Navigation.css'\nimport WeatherContext from '../../context/WeatherContext'\nimport { weatherMode } from '../../enums'\n\ntype PathParams = {\n    path: string;\n}\n\ntype Props = RouteComponentProps<PathParams>;\n\n\nclass Navigation extends React.Component<Props> {\n    \n    forecastClicked = (history: RouteComponentProps[\"history\"]): void => {\n        this.context.changeWeatherMode(weatherMode.forecast)\n        history.replace(\"/forecast\")\n    }\n    \n    currentClicked = (history: RouteComponentProps[\"history\"]): void => {\n        this.context.changeWeatherMode(weatherMode.current)\n        history.replace(\"/current\")\n    }\n\n    render() {\n        return (\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                <Navbar.Brand>Forecast.IO</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link className={this.props.location.pathname === \"/forecast\" ? \"active\" : \"\"} onClick={() => this.forecastClicked(this.props.history)}>\n                            5 Days\n                </Nav.Link>\n                        <Nav.Link className={this.props.location.pathname === \"/current\" ? \"active\" : \"\"} onClick={() => this.currentClicked(this.props.history)}>\n                            Current\n                </Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}\n\nNavigation.contextType = WeatherContext\n\n\nexport default withRouter(Navigation)","import React from 'react'\nimport WeatherContext from '../../context/WeatherContext'\nimport './Banner.css'\nimport { Jumbotron, Form, Button } from 'react-bootstrap'\nimport { weatherMode, searchMode, measurementSys } from '../../enums'\n\ninterface State {\n    readonly city: string;\n    readonly coord: [string, string];\n}\n\nclass Banner extends React.Component {\n    state: State = {\n        city: \"\",\n        coord: [\"\", \"\"]\n    }\n\n    titleDecider = (weatherMethod: weatherMode) => {\n        switch (weatherMethod) {\n            case (weatherMode.forecast):\n                return \"5 Day Forecast\"\n            case (weatherMode.current):\n                return \"Current\"\n        }\n    }\n\n    cityTextChanged = (city: string) => {\n        this.setState({ city: city })\n    }\n\n    coordTextChanged = (index: number, value: string) => {\n        const newCoord = [...this.state.coord]\n        newCoord[index] = value\n        this.setState({ coord: newCoord })\n    }\n\n    formDecider = (searchMethod: searchMode) => {\n        switch (searchMethod) {\n            case (searchMode.city):\n                return (<Form.Group>\n                    <Form.Control id=\"city\" type=\"text\" placeholder=\"City Name\"\n                        aria-label=\"Enter city name\" value={this.state.city}\n                        onChange={(event) => this.cityTextChanged(event.target.value)} />\n                </Form.Group>)\n            case (searchMode.coord):\n                return (<Form.Group>\n                    <Form.Control type=\"text\" placeholder=\"Latitude\" aria-label=\"Enter latitude\"\n                        value={this.state.coord[0]}\n                        onChange={(event) => this.coordTextChanged(0, event.target.value)} />\n                    <Form.Control type=\"text\" placeholder=\"Longitude\" aria-label=\"Enter longitude\"\n                        value={this.state.coord[1]}\n                        onChange={(event) => this.coordTextChanged(1, event.target.value)} />\n                </Form.Group>)\n        }\n    }\n\n    searchChanged = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        switch (event.target.value) {\n            case (\"city\"):\n                this.context.changeSearchMode(searchMode.city)\n                break;\n            case (\"coord\"):\n                this.context.changeSearchMode(searchMode.coord)\n                break;\n        }\n    }\n\n    formSubmit = (event: React.FormEvent) => {\n        event.preventDefault()\n        this.context.cityChanged(this.state.city)\n        this.context.coordChanged(this.state.coord)\n    }\n\n    render() {\n\n        const title = this.titleDecider(this.context.weatherMode)\n        const form = this.formDecider(this.context.searchMode)\n\n        return (\n            <Jumbotron>\n                <h1 className=\"display-2\">{title}</h1>\n                <h1 className=\"display-4 text-muted\" style={{textTransform: \"capitalize\"}}>{this.context.city}</h1>\n                <Form onSubmit={this.formSubmit}>\n                    <Form.Group>\n                        <Form.Label aria-label=\"Select search method\">Search by:</Form.Label>\n                        <Form.Control as=\"select\" onChange={(event: React.ChangeEvent<HTMLInputElement>) => this.searchChanged(event)}>\n                            <option value=\"city\" aria-label=\"Search by city\">City</option>\n                            <option value=\"coord\" aria-label=\"Search by coordinates\">Coordinates</option>\n                        </Form.Control>\n                    </Form.Group>\n                    {form}\n                    <Button type=\"submit\" onSubmit={this.formSubmit} className=\"mb-4\">Submit</Button>\n                    <Form.Group controlId=\"formBasicRangeCustom\">\n                        <Form.Label>Measurement System</Form.Label>\n                        <Form.Control type=\"range\" custom min=\"0\" value={this.context.measureSys} max=\"2\" onChange={(event) => this.context.measureSysChanged(event.target.value)} />\n                    </Form.Group>\n                    <h3>{measurementSys[this.context.measureSys]}</h3>\n                </Form>\n            </Jumbotron>\n        )\n    }\n}\n\nBanner.contextType = WeatherContext\n\nexport default Banner;","import React from 'react'\nimport Navigation from '../Navigation/Navigation'\nimport Banner from '../../containers/Banner/Banner'\n\ninterface Props {\n    children: React.ReactNode\n}\n\nconst Layout: React.FC<Props> = ({children} : Props) => {\n    return (\n        <React.Fragment>\n            <Navigation />\n            <Banner/>\n            <main>\n                {children}\n            </main>\n        </React.Fragment>\n    )\n}\n\nexport default Layout","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://forecast-io-server.herokuapp.com'\n})\n\nexport default instance","//takes unix time stamp\nexport const timestampToAdjustedDate =(timestamp: number, timezone: number): Date => (\n    new Date(timestamp * 1000 + timezone * 1000)\n)\n\n\n\n\n\n//MAKE SURE ARGUMENTS HAVE BEEN ADJUSTED TO TIMEZONE\n\n\n//can't use Date locale methods as it will not adjust to searched location\n//That is EDT searching PDT gets EDT time.\nexport const getDayString = (day: number): string => {\n    switch (day) {\n        case(0):\n            return \"Sunday\"\n        case(1):\n            return \"Monday\"\n        case(2):\n            return \"Tuesday\"\n        case(3):\n            return \"Wednesday\"\n        case(4):\n            return \"Thursday\"\n        case(5):\n            return \"Friday\"\n        case(6):\n            return \"Saturday\"\n        default:\n            return \"\"\n    }\n}\n\nexport const getMonthString = (month: number): string => {\n    switch (month) {\n        case(0):\n            return \"January\"\n        case(1):\n            return \"February\"\n        case(2):\n            return \"March\"\n        case(3):\n            return \"April\"\n        case(4):\n            return \"May\"\n        case(5):\n            return \"June\"\n        case(6):\n            return \"July\"\n        case(7):\n            return \"August\"\n        case(8):\n            return \"September\"\n        case(9):\n            return \"October\"\n        case(10):\n            return \"November\"\n        case(11):\n            return \"December\"\n        default:\n            return \"\"\n    }\n}\n\nexport const getTimeString = (hour: number, minutes: number): string => {\n    const mins = minutes > 9? minutes : \"0\" + minutes\n\n    if (hour === 0) {\n        return \"12:\"+mins +\" am\"\n    } else if (hour < 12) {\n        return hour+\":\"+mins +\" am\"\n    } else if (hour === 12) {\n        return \"12:\" + mins + \" pm\"\n    } else {\n        return (hour-12)+\":\"+mins +\" pm\"\n    }\n}\n\nexport const timestampToTimeString = (timestamp: number, timezone: number) => {\n    const date = timestampToAdjustedDate(timestamp, timezone)\n    const hours = date.getUTCHours()\n    const minutes = date.getUTCMinutes()\n    return getTimeString(hours, minutes)\n}","import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport { getDayString, getMonthString, timestampToTimeString, timestampToAdjustedDate } from '../../Resolvers/DateResolver/DateResolver'\n\ninterface Props {\n    dateTimestamp: number,\n    weatherInfo: any,\n    timezone: number,\n    temp: string\n    clicked?: (event: React.MouseEvent<HTMLButtonElement>) => void,\n}\n\nconst WeatherCard: React.FC<Props> = ({ dateTimestamp, weatherInfo, timezone, temp, clicked }: Props) => {\n    const localDate = timestampToAdjustedDate(dateTimestamp, timezone)\n\n    return (\n        <Card style={{ textAlign: \"center\" }}>\n            <button style={{ background: \"none\", border: \"none\" }} onClick={clicked || undefined}>\n                <Card.Body>\n                    <Card.Title>{getDayString(localDate.getUTCDay())}</Card.Title>\n                    <Card.Text>{timestampToTimeString(dateTimestamp, timezone)}</Card.Text>\n                    <Card.Subtitle className=\"mb-2 text-muted\">{getMonthString(localDate.getUTCMonth()) + \" \" + localDate.getUTCDate()}</Card.Subtitle>\n                    <Card.Img src={\"http://openweathermap.org/img/wn/\" + weatherInfo[0].icon + \"@2x.png\"} alt={weatherInfo[0].main} />\n                    <Card.Title>{temp}</Card.Title>\n                    <Card.Text style={{ textTransform: \"capitalize\" }}>{weatherInfo[0].description}</Card.Text>\n                </Card.Body>\n            </button>\n        </Card>\n    )\n}\n\nexport default WeatherCard","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M64,0l64,128l-128,0l64,-128Z\"\n});\n\nvar SvgArrow = function SvgArrow(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    viewBox: \"0 0 128 128\",\n    xmlSpace: \"preserve\",\n    style: {\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\",\n      strokeLinejoin: \"round\",\n      strokeMiterlimit: 2\n    },\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgArrow, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/Arrow.6b395422.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\nimport { ReactComponent as Arrow } from '../../../assets/Arrow.svg'\nimport classes from './ArrowButton.module.css'\n\nexport enum Direction {\n    up,\n    down\n}\n\ninterface Props {\n    direction: Direction;\n    clicked: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    show: boolean;\n}\n\nconst ArrowButton: React.FC<Props> = ({direction, clicked, show}: Props) => {\n    const buttonStyle = [classes.button]\n    direction === Direction.up ? buttonStyle.push(classes.up) : buttonStyle.push(classes.down)\n    if (!show) {\n        buttonStyle.push(classes.hide)\n    }\n\n    return (\n        <button className={buttonStyle.join(\" \")} onClick={clicked}>\n            <Arrow className={classes.arrow}/>\n        </button>\n    )\n}\n\nexport default ArrowButton","import { measurementSys } from '../../enums'\n\n//takes kelvin\nexport const getTemperature = (temp: number, measureSys: measurementSys): string => {\n    switch (Number(measureSys)) {\n        case (measurementSys.Kelvin):\n            return temp.toFixed(1) + \" K\"\n        case (measurementSys.Metric):\n            return (temp - 273.15).toFixed(1) + \" °C\"\n        case (measurementSys.Imperial):\n            return ((temp - 273.15) * 9 / 5 + 32).toFixed(1) + \" °F\"\n    }\n    return \"This should not happen\"\n}\n\n//takes degrees\nexport const angleToDirection = (angle: number) => {\n    const output = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"]\n    angle = Math.round(angle / (360/16))\n    angle %= 16\n    return output[angle]\n}\n\n//takes m/s\nexport const getSpeed = (speed: number, measureSys: measurementSys): string => {\n    const kmh = speed * 3600 / 1000\n    switch (Number(measureSys)) {\n        case (measurementSys.Imperial):\n            return (kmh / 1.60934).toFixed(1) + \" MPH \"\n        default:\n            return kmh.toFixed(1) + \" km/h \"\n    }\n}\n\n//takes m\nexport const getDistance = (meters: number, measureSys: measurementSys): string => {\n    const km = meters / 1000\n    switch (Number(measureSys)) {\n        case (measurementSys.Imperial):\n            return (km/1.60934).toFixed(1) + \" mi. \"\n        default:\n            return km.toFixed(1) + \" km \"\n    }\n}\n\n//takes mm\nexport const getVolume = (volume: number, measureSys: measurementSys): string => {\n    switch (Number(measureSys)) {\n        case (measurementSys.Imperial):\n            return Math.round(volume / 25.4*100)/100 + \" in.\"\n        default:\n            return volume.toFixed(2) + \" mm\"\n    }\n}","import React from 'react'\nimport WeatherCard from '../WeatherCard/WeatherCard'\nimport { Row, Jumbotron, Container, Col, Badge } from 'react-bootstrap'\nimport { getTemperature, getSpeed, angleToDirection, getVolume, getDistance } from '../../Resolvers/UnitResolver/UnitResolver'\nimport { timestampToTimeString } from '../../Resolvers/DateResolver/DateResolver'\nimport { measurementSys } from '../../enums'\n\ninterface Props {\n    weather: any;// from the list object that open weather map api returns\n    timezone: number;\n    measureSys: measurementSys\n}\n\nconst DetailedWeather: React.FC<Props> = ({ weather, timezone, measureSys }: Props) => {\n    const feelsLike = weather.main !== undefined ? (weather.main.feels_like !== undefined ? <h4>Feels like: <Badge variant=\"primary\">{getTemperature(weather.main.feels_like, measureSys)}</Badge></h4> : null) : null\n    const humidity = weather.main !== undefined ? (weather.main.humidity !== undefined ? <h4>Humidity: <Badge variant=\"secondary\">{weather.main.humidity}%</Badge></h4> : null) : null\n    const cloudiness = weather.clouds !== undefined ? (weather.clouds.all !== undefined ? <h4>Cloudiness: <Badge variant=\"secondary\">{weather.clouds.all}%</Badge></h4> : null) : null\n\n    const windSpeed = weather.wind !== undefined ? (weather.wind.speed !== undefined ? getSpeed(weather.wind.speed, measureSys) : \"\") : \"\"\n    const windDirection = weather.wind !== undefined ? (weather.wind.deg !== undefined ? angleToDirection(weather.wind.deg) : \"\") : \"\"\n    const windVelocity = windSpeed + windDirection\n    const wind = windVelocity !== \"\" ? <h4>Wind: <Badge variant=\"secondary\">{windVelocity}</Badge></h4> : null\n\n    const rain = weather.rain !== undefined ? (weather.rain[\"3h\"] !== undefined ? <h4>Rain: <Badge variant=\"secondary\">{getVolume(weather.rain[\"3h\"], measureSys)}</Badge></h4> : null) : null\n    const snow = weather.snow !== undefined ? (weather.snow[\"3h\"] !== undefined ? <h4>Rain: <Badge variant=\"secondary\">{getVolume(weather.snow[\"3h\"], measureSys)}</Badge></h4> : null) : null\n\n    const visibility = weather.visibility !== undefined ? <h4>Visibility: <Badge variant=\"secondary\">{getDistance(weather.visibility, measureSys)}</Badge></h4> : null\n    \n    const sunrise = weather.sys !== undefined? (weather.sys.sunrise !== undefined? <h4>Sunrise: <Badge variant=\"secondary\">{timestampToTimeString(weather.sys.sunrise, timezone)}</Badge></h4>:null) : null\n    const sunset = weather.sys !== undefined? (weather.sys.sunset !== undefined? <h4>Sunset: <Badge variant=\"secondary\">{timestampToTimeString(weather.sys.sunset, timezone)}</Badge></h4>:null) : null\n    \n    return (\n        <Container>\n            <Jumbotron fluid className=\"col-6 offset-3\">\n                <Row className=\"m-auto justify-content-center\">\n                    <WeatherCard dateTimestamp={weather.dt} temp={getTemperature(weather.main.temp, measureSys)} timezone={timezone}\n                        weatherInfo={weather.weather} />\n                    <Col className=\"justify-content-center align-self-center col-6\">\n                        {feelsLike}\n                        {humidity}\n                        {cloudiness}\n                        {wind}\n                        {rain}\n                        {snow}\n                        {visibility}\n                        {sunrise}\n                        {sunset}\n                    </Col>\n                </Row>\n            </Jumbotron>\n        </Container>\n    )\n}\n\nexport default DetailedWeather","import { searchMode } from '../../enums'\n\nexport const shouldUpdateSearch = (currentCity: string, currentCoord: [string, string], oldCity: string, oldCoord: [string, string], searchMethod: searchMode) => {\n    if ((currentCity !== oldCity && searchMethod === searchMode.city) || (currentCoord !== oldCoord && searchMethod === searchMode.coord)) {\n        return true\n    }\n    return false\n}\n\nexport const getSearchPath = (searchMethod: searchMode, city: string, coord:[string, string]) => {\n    switch (searchMethod) {\n        case (searchMode.city):\n            return \"/city?city=\" + city\n        case (searchMode.coord):\n            return \"/coord?lat=\" + coord[0] + \"&lon=\" + coord[1]\n    }\n}","import React from 'react'\nimport { Container, Spinner, Alert } from 'react-bootstrap'\n\nexport const contentDeterminer = (content: JSX.Element, loading: boolean, code: number | null, message: string | null) => {\n    if (loading) {\n        return (\n            <Container className=\"text-center\">\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n            </Container>)\n    } else if (code !== 200 && code !== null) {\n        return (<Alert variant=\"danger\" style={{ textTransform: \"capitalize\" }}>Error {code}. {message}</Alert>)\n    } else {\n        return content\n    }\n}","import React from 'react'\nimport axios from '../../axios'\nimport { searchMode } from '../../enums'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport WeatherCard from '../../components/WeatherCard/WeatherCard'\nimport { timestampToAdjustedDate } from '../../Resolvers/DateResolver/DateResolver'\nimport { measurementSys } from '../../enums'\nimport ArrowButton, { Direction } from '../../components/UI/ArrowButton/ArrowButton'\nimport DetailedForecast from '../../components/DetailedWeather/DetailedWeather'\nimport { getTemperature } from '../../Resolvers/UnitResolver/UnitResolver'\nimport { getSearchPath, shouldUpdateSearch } from '../../Resolvers/SearchResolver/SearchResolver'\nimport { contentDeterminer } from '../../Resolvers/ContentResolver/ContentResolver'\n\ninterface Props {\n    readonly oldData: ForecastState | null,\n    readonly saveData: (state: ForecastState) => void,\n    readonly searchMethod: searchMode,\n    readonly city: string,\n    readonly coord: [string, string],\n    readonly measureSys: measurementSys,\n    readonly changedCity: (city: string) => void,\n    readonly loading: boolean,\n    readonly updateLoading: (value: boolean) => void\n}\n\nexport interface ForecastState {\n    readonly code: number | null;\n    readonly message: string | null;\n    readonly forecast: Array<Array<any>>;//openweathermap api docs are really lacking -> unpredicatble inputs -> can't type\n    readonly cityInfo: any;\n    readonly forecastIndex: Array<number>;\n    readonly selectedForecast: [number, number];\n}\n\nclass Forecast extends React.Component<Props> {\n    state: ForecastState = {\n        code: null,\n        message: null,\n        forecast: new Array<Array<any>>(5),\n        cityInfo: {},\n        forecastIndex: new Array<number>(5),\n        selectedForecast: [0, 0],\n    }\n\n    componentDidMount() {\n        if (this.props.oldData !== null && this.props.oldData.cityInfo.name === this.props.city) {\n            this.setState(this.props.oldData)\n            this.props.changedCity(this.props.oldData.cityInfo.name)\n        } else if (this.props.city !== \"\" || (this.props.coord[0] !== \"\" && this.props.coord[1] !== \"\")) {\n            this.getForecast()\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (shouldUpdateSearch(this.props.city, this.props.coord, prevProps.city, prevProps.coord, this.props.searchMethod)) {\n            this.getForecast()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.saveData(this.state)\n    }\n\n    getForecast = () => {\n        this.props.updateLoading(true)\n        const url = \"/forecast\" + getSearchPath(this.props.searchMethod, this.props.city, this.props.coord)\n        axios.get(url).then(res => {\n\n            const data = res.data\n\n            const code = parseInt(data.cod)\n            const cityInfo = data.city\n            const forecast: Array<Array<any>> = [[], [], [], [], []]\n\n            var index: number = -1\n            var lastDate: number = 0;\n            for (let weatherData of data.list) {//collect all data for corresponding days of the week\n                const date = timestampToAdjustedDate(weatherData.dt, cityInfo.timezone).getUTCDate()\n                if (lastDate !== date) {\n                    index++;\n                    lastDate = date\n                }\n                if (index === 5) {\n                    break;\n                }\n                forecast[index].push(weatherData)\n            }\n\n            const forecastIndex = forecast.map((day, index) => {//find appropriate time to display for default: 11am-2pm are default and varies according to timezone\n                if (index === 0) {\n                    return 0;\n                }\n\n                var hourlyIndex = 0\n                for (let hourForecast of day) {\n                    const date = timestampToAdjustedDate(hourForecast.dt, cityInfo.timezone)\n                    if (date.getUTCHours() >= 11) {\n                        return hourlyIndex\n                    }\n                    hourlyIndex++;\n                }\n\n                return 0\n            })\n\n            this.props.changedCity(data.city.name)\n            this.setState({ code: code, forecast: forecast, cityInfo: cityInfo, forecastIndex: forecastIndex })\n            this.props.updateLoading(false)\n        }).catch(err => {\n            const response = err.response\n            this.setState({ code: response.status, message: response.data.message })\n            this.props.updateLoading(false)\n        })\n    }\n\n\n\n    //index for the following methods refers to the index of the corresponding days\n    cardCycleUp = (index: number): void => {\n        const newForecastIndex: Array<number> = [...this.state.forecastIndex]\n        newForecastIndex[index] = newForecastIndex[index] + 1;\n        this.setState({ forecastIndex: newForecastIndex })\n    }\n\n    cardCycleDown = (index: number): void => {\n        const newForecastIndex: Array<number> = [...this.state.forecastIndex]\n        newForecastIndex[index] = newForecastIndex[index] - 1;\n        this.setState({ forecastIndex: newForecastIndex })\n    }\n\n    changeSelectedForecast = (index: number): void => {\n        this.setState({ selectedForecast: [index, this.state.forecastIndex[index]] })\n    }\n\n    render() {\n        const cards = this.state.forecast.map((day, index) => {\n            const forecast = this.state.code === 200 ? this.state.forecast[index][this.state.forecastIndex[index]] : null\n            const temperature = getTemperature(forecast.main.temp, this.props.measureSys)\n            const card = this.state.code === 200 ? <WeatherCard dateTimestamp={forecast.dt} weatherInfo={forecast.weather}\n                timezone={this.state.cityInfo.timezone} temp={temperature} clicked={() => this.changeSelectedForecast(index)} /> : null\n            return (\n                <Col key={index} className=\"col-6 col-sm-5 col-md-4 col-lg-3 col-xl-2 text-center\">\n                    <ArrowButton direction={Direction.up} clicked={() => this.cardCycleUp(index)} show={this.state.forecastIndex[index] < this.state.forecast[index].length - 1} />\n                    {card}\n                    <ArrowButton direction={Direction.down} clicked={() => this.cardCycleDown(index)} show={this.state.forecastIndex[index] > 0} />\n                </Col>\n            )\n        })\n        const detailedInfo = this.state.code === 200 ? this.state.forecast[this.state.selectedForecast[0]][this.state.selectedForecast[1]] : null\n        const detailedForecast = this.state.code === 200 ? <DetailedForecast weather={detailedInfo} timezone={this.state.cityInfo.timezone} measureSys={this.props.measureSys} /> : null\n\n        const weatherInfo = <Container>\n            <Row className=\"justify-content-center\">\n                {cards}\n                {detailedForecast}\n            </Row>\n        </Container>\n\n        const content = contentDeterminer(weatherInfo, this.props.loading, this.state.code, this.state.message)\n\n        return content\n    }\n}\n\nexport default Forecast","import React from 'react'\nimport axios from '../../axios'\nimport { getSearchPath, shouldUpdateSearch } from '../../Resolvers/SearchResolver/SearchResolver'\nimport { searchMode, measurementSys } from '../../enums'\nimport DetailedWeather from '../../components/DetailedWeather/DetailedWeather'\nimport { Container, Alert } from 'react-bootstrap'\nimport { contentDeterminer } from '../../Resolvers/ContentResolver/ContentResolver'\n\ninterface Props {\n    city: string,\n    coord: [string, string],\n    searchMethod: searchMode,\n    cityChanged: (city: string) => void,\n    measureSys: measurementSys,\n    loading: boolean,\n    updateLoading: (value: boolean) => void\n}\n\nexport interface CurrentState {\n    code: number | null;\n    message: string | null;\n    weather: any;\n}\n\nclass Current extends React.Component<Props> {\n    state: CurrentState = {\n        code: null,\n        message: null,\n        weather: {},\n    }\n\n    componentDidMount() {\n        if (this.props.city !== \"\" || (this.props.coord[0] !== \"\" && this.props.coord[1] !== \"\")) {\n            this.getCurrent()\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (shouldUpdateSearch(this.props.city, this.props.coord, prevProps.city, prevProps.coord, this.props.searchMethod)) {\n            this.getCurrent()\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    getCurrent = () => {\n        this.props.updateLoading(true)\n        const url = \"/current\" + getSearchPath(this.props.searchMethod, this.props.city, this.props.coord)\n        axios.get(url).then(res => {\n            const data = res.data\n\n            if (data.cod !== 200) {\n                throw res.data\n            }\n\n            this.props.cityChanged(data.name)\n            this.props.updateLoading(false)\n            this.setState({ weather: data, code: data.cod })\n        }).catch(err => {\n            const response = err.response\n            this.setState({ code: response.status, message: response.data.message })\n            this.props.updateLoading(false)\n        })\n    }\n\n    \n\n    render() {\n        const currentWeather = this.state.code === 200 ? <DetailedWeather weather={this.state.weather} measureSys={this.props.measureSys} timezone={this.state.weather.timezone} /> : null\n        const weatherInfo = <Container>\n            {this.state.code === 200 ? <Alert className=\"text-center\" variant=\"info\">Time is only as accurate as OpenWeatherMap API provides it. Time will usually be accurate within 10 minutes.</Alert> : null}\n            {currentWeather}\n        </Container>\n        \n        const content = contentDeterminer(weatherInfo, this.props.loading, this.state.code, this.state.message)\n\n        return content\n    }\n}\n\nexport default Current","import React from 'react';\nimport Layout from './components/Layout/Layout'\nimport { Switch, Route, Redirect, withRouter, RouteComponentProps } from 'react-router-dom'\nimport { weatherMode, searchMode, measurementSys } from './enums'\nimport WeatherContext from './context/WeatherContext'\nimport Forecast, { ForecastState } from './containers/Forecast/Forecast'\nimport Current from './containers/Current/Current'\n\ninterface State {\n  readonly weatherMethod: weatherMode;\n  readonly searchMethod: searchMode;\n  readonly city: string;\n  readonly coord: [string, string];\n  readonly measureSys: measurementSys;\n  readonly loading: boolean;\n  readonly forecastData: ForecastState | null;\n}\n\ninterface PathParams {\n  path: string\n}\n\ntype Props = RouteComponentProps<PathParams>\n\nclass App extends React.Component<Props> {\n  state: State = {\n    weatherMethod: weatherMode.forecast,\n    searchMethod: searchMode.city,\n    city: \"\",\n    coord: [\"\", \"\"],\n    measureSys: measurementSys.Metric,\n    loading: false,\n    forecastData: null\n  }\n\n  componentDidMount() {\n    const location = this.props.location.pathname\n    switch (location) {\n      case (\"/forecast\"):\n        this.changeWeather(weatherMode.forecast)\n        break;\n      case (\"/current\"):\n        this.changeWeather(weatherMode.current)\n        break;  \n    }\n  }\n\n  changeWeather = (value: weatherMode) => {\n    this.setState({ weatherMethod: value })\n  }\n\n  changeSearch = (value: searchMode) => {\n    this.setState({ searchMethod: value })\n  }\n\n  changeCity = (city: string) => {\n    this.setState({ city: city })\n  }\n\n  changeCoord = (coord: Array<string>) => {\n    const newCoord = [...coord]\n    this.setState({ coord: newCoord })\n  }\n\n  measureSysChange = (value: measurementSys) => {\n    this.setState({measureSys: value})\n  }\n\n  updateLoading = (newLoading: boolean) => {\n    this.setState({loading: newLoading})\n  }\n\n  saveForecastData = (state: ForecastState) => {\n    this.setState({forecastData: state})\n  }\n\n  render() {\n    return (\n      <WeatherContext.Provider value={{\n        changeWeatherMode: this.changeWeather,\n        changeSearchMode: this.changeSearch,\n        weatherMode: this.state.weatherMethod,\n        searchMode: this.state.searchMethod,\n        city: this.state.city,\n        coord: this.state.coord,\n        cityChanged: this.changeCity,\n        coordChanged: this.changeCoord,\n        measureSys: this.state.measureSys,\n        measureSysChanged: this.measureSysChange\n      }}>\n        <Layout>\n          <Switch>\n            <Route path=\"/forecast\" render={() => <Forecast city={this.state.city} coord={this.state.coord}\n            searchMethod={this.state.searchMethod} measureSys={this.state.measureSys} changedCity={this.changeCity}\n            loading={this.state.loading} updateLoading={this.updateLoading} oldData={this.state.forecastData} saveData={this.saveForecastData}/>} />\n            <Route path=\"/current\" render={() => <Current city={this.state.city} coord={this.state.coord} searchMethod={this.state.searchMethod}\n            cityChanged={this.changeCity} measureSys={this.state.measureSys} loading={this.state.loading} updateLoading={this.updateLoading} />} />\n            <Redirect to=\"/forecast\" />\n          </Switch>\n        </Layout>\n      </WeatherContext.Provider>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}